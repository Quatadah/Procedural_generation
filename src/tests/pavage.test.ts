import * as texture from "../types/texture";
import * as color from "../types/color";

import * as CB from "../generators/polygone/regular/checkerBoard";
import * as TR from "../generators/polygone/regular/triangular";
import * as HX from "../generators/polygone/regular/hexagonal";

import * as HS from "../generators/polygone/semi-regular/hexagonalsoftened";
import * as SS from "../generators/polygone/semi-regular/squaresoftened";
import * as TE from "../generators/polygone/semi-regular/triangularelongated";
import * as TH from "../generators/polygone/semi-regular/trihexagonal";
import * as TRH from "../generators/polygone/semi-regular/truncatedhexagone";
import * as TS from "../generators/polygone/semi-regular/truncatedsquare";

function testPavage(str: string, texture: texture.texture, content: color.color[][]) {
    const width = content.length;
    const height = content[0].length;
    describe("Generator test : " + str, () => {
        test("Texture is consistent", () => {
            for (let i: number = 0; i < width; i++) {
                let L1: string[] = new Array<string>();
                for (let j: number = 0; j < height; j++) {
                    if (texture(i, j).r === 255 && texture(i, j).g === 255 && texture(i, j).b === 255) {
                        L1.push("WHITE");
                    } else if (texture(i, j).r === 255) {
                        L1.push("RED");
                    } else if (texture(i, j).b === 255) {
                        L1.push("BLUE");
                    } else {
                        L1.push("BLACK");
                    }
                    expect(texture(i, j)).toStrictEqual(content[i][j]);
                }
            }
        });
    });
}

let BLACK: color.color = { r: 0, g: 0, b: 0, a: 255 };
let WHITE: color.color = { r: 255, g: 255, b: 255, a: 255 };
let RED: color.color = { r: 255, g: 0, b: 0, a: 255 };
let BLUE: color.color = { r: 0, g: 0, b: 255, a: 255 };

let CheckerBoard = [[BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE],
[WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK],
[BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE],
[WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK],
[BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE],
[WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK],
[BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE],
[WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK],
[BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE],
[WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK, WHITE, BLACK]];
testPavage("CheckerBoard", CB.texCheckerBoard(1, 1, BLACK, WHITE), CheckerBoard);


let Triangular = [
    [WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK],
    [WHITE, WHITE, WHITE, BLACK, BLACK, WHITE, WHITE, BLACK, BLACK, BLACK],
    [WHITE, WHITE, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, BLACK],
    [WHITE, WHITE, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, BLACK],
    [WHITE, WHITE, WHITE, BLACK, BLACK, WHITE, WHITE, BLACK, BLACK, BLACK],
    [WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK],
    [WHITE, WHITE, WHITE, BLACK, BLACK, WHITE, WHITE, BLACK, BLACK, BLACK],
    [WHITE, WHITE, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, BLACK],
    [WHITE, WHITE, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, BLACK],
    [WHITE, WHITE, WHITE, BLACK, BLACK, WHITE, WHITE, WHITE, BLACK, BLACK]
];

testPavage("Triangular", TR.texTriangleBoard(5, 5, BLACK, WHITE), Triangular);


let Hexagonal =
    [[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED],
    [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, RED, RED],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, RED, RED],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, RED],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK],
    [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK],
    [RED, RED, RED, RED, RED, RED, RED, BLACK, BLACK, BLACK],
    [RED, RED, RED, RED, RED, RED, RED, RED, BLACK, BLACK],
    [RED, RED, RED, RED, RED, RED, RED, RED, RED, BLACK],
    [RED, RED, RED, RED, RED, RED, RED, RED, RED, RED],
    [RED, RED, RED, RED, RED, RED, RED, RED, RED, RED],
    [RED, RED, RED, RED, RED, RED, RED, RED, RED, RED],
    [RED, RED, RED, RED, RED, RED, RED, RED, RED, WHITE],
    [RED, RED, RED, RED, RED, RED, RED, RED, WHITE, WHITE],
    [RED, RED, RED, RED, RED, RED, RED, WHITE, WHITE, WHITE]];



testPavage("Hexagonal", HX.texHexagoneBoard(10, 10, BLACK, WHITE, RED), Hexagonal);


let SoftenedHexagonal = [[WHITE, WHITE, WHITE, WHITE, WHITE, RED, RED, RED, RED, WHITE],
[WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, RED, RED, WHITE],
[WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE],
[WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, WHITE],
[WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, RED, RED, RED, WHITE],
[WHITE, WHITE, WHITE, WHITE, RED, WHITE, RED, RED, RED, WHITE],
[WHITE, WHITE, WHITE, RED, RED, WHITE, WHITE, RED, RED, WHITE],
[WHITE, RED, RED, RED, RED, WHITE, WHITE, WHITE, WHITE, WHITE],
[WHITE, WHITE, RED, RED, RED, WHITE, WHITE, WHITE, BLACK, BLACK],
[WHITE, WHITE, WHITE, RED, RED, WHITE, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, RED, RED, RED, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, RED, RED, RED, RED, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, RED, RED, RED, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, RED, RED, WHITE, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, RED, RED, RED, WHITE, WHITE, WHITE, BLACK, BLACK],
[BLACK, RED, RED, RED, RED, WHITE, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, RED, RED, WHITE, WHITE, RED, RED, WHITE],
[BLACK, BLACK, BLACK, BLACK, RED, WHITE, RED, RED, RED, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, RED, RED, RED, WHITE]];



testPavage("Softened Hexagonal", HS.texSoftenedHexagone(10, 10, BLACK, WHITE, RED), SoftenedHexagonal);



let SoftenedSquare = [[BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, RED, RED, RED, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, RED, RED, RED, RED, RED, WHITE, WHITE],
[BLACK, BLACK, RED, RED, RED, RED, RED, RED, RED, RED],
[BLACK, BLACK, RED, RED, RED, RED, RED, RED, RED, RED],
[BLACK, RED, RED, RED, RED, RED, RED, RED, RED, RED],
[BLACK, RED, RED, RED, RED, RED, RED, RED, RED, WHITE],
[BLACK, RED, RED, RED, RED, RED, RED, RED, RED, WHITE],
[BLACK, BLACK, BLACK, RED, RED, RED, RED, RED, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED, WHITE, WHITE]];



testPavage("Softened Square", SS.texSoftenedSquare(5, 5, BLACK, WHITE, RED), SoftenedSquare);

let TriangularElongated = [[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLUE, BLUE, RED, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLUE, BLUE, BLUE, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLUE, BLUE, BLUE, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLUE, BLUE, RED, RED],
[WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, RED, RED, RED, RED],
[WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLUE, BLUE, RED, RED],
[WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLUE, BLUE, BLUE, RED],
[WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLUE, BLUE, BLUE, RED],
[WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, BLUE, BLUE, RED, RED]];



testPavage("Triangular Elongated", TE.texTriangularElongatedBoard(5, 5, BLACK, WHITE, RED, BLUE), TriangularElongated);


let Trihexagonal = [[WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, RED, RED, RED, RED],
[WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED],
[WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED]];


testPavage("TriHexagonal", TH.textriHexagonalBoard(10, 10, BLACK, WHITE, RED), Trihexagonal);

let TruncatedHexagone = [[BLACK, BLACK, BLACK, BLACK, BLUE, BLUE, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLUE, BLUE],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLUE, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED],
[BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, RED, RED, RED, RED]];


testPavage("Truncated Hexagone", TRH.texTruncatedHexagone(10, 10, BLACK, WHITE, RED, BLUE), TruncatedHexagone);


let TruncatedSquare = [[RED, RED, WHITE, WHITE, RED, RED, RED, WHITE, WHITE, RED, RED, RED, WHITE, WHITE, RED, RED, RED, WHITE, WHITE, RED],
[RED, WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK, RED, WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK],
[WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK],
[RED, WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK, RED, WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK],
[RED, RED, WHITE, WHITE, RED, RED, RED, WHITE, WHITE, RED, RED, RED, WHITE, WHITE, RED, RED, RED, WHITE, WHITE, RED],
[RED, BLACK, BLACK, BLACK, BLACK, RED, WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK, RED, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE],
[BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE, BLACK, BLACK, BLACK, BLACK, BLACK, WHITE, WHITE, WHITE, WHITE, WHITE],
[RED, BLACK, BLACK, BLACK, BLACK, RED, WHITE, WHITE, WHITE, WHITE, RED, BLACK, BLACK, BLACK, BLACK, RED, WHITE, WHITE, WHITE, WHITE]];


testPavage("Truncated Square", TS.textruncatedSquareBoard(5, 5, BLACK, WHITE, RED), TruncatedSquare);
